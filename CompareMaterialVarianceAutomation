const monthNames = ["jan", "feb", "mar", "apr", "may", "jun",
                    "jul", "aug", "sep", "oct", "nov", "dec"];
 
 const materialData = {
  caustic: [],
  cp5: [],
  labsa: [],
  pvd_salt: [],
  salts_grade_1: [],
  scmc: [],
  silicate: [],
  carbomil_soda: [],
  soda_ash_light: [],
  unit1_solar: [],
  unit2_easy_wash: [],
  unit1_base_powder: [],
  unit2_base_powder: [],
  total_material: [],
  total_units: [],
    unit1_parijat:[]
};
const labelToKey = {
  "caustic": "caustic",
  "cp5": "cp5",
  "labsa": "labsa",
  "pvd salt": "pvd_salt",
  "salts(grade 1)": "salts_grade_1",
  "scmc": "scmc",
  "silicate": "silicate",
  "carbomil soda": "carbomil_soda",
  "soda ash light": "soda_ash_light",
  "unit-1,sunlight solar sfg:": "unit1_solar",
    "unit-1,sunlight parijat fg:":"unit1_parijat",
  "unit-2 surf excel easy wash": "unit2_easy_wash",
  "unit-1 base powder": "unit1_base_powder",
  "unit-2 base powder": "unit2_base_powder"
};                  
 
const today = new Date();
const endDate = new Date(today);
endDate.setDate(today.getDate() - 1);
const startDate = new Date(endDate);
startDate.setDate(endDate.getDate() - 15);
 
 
function openAndClickReportChild(childTitle) {
  const menuItems = document.querySelectorAll('.has-children');
 
  for (const item of menuItems) {
    const img = item.querySelector('img[alt="Datamanagementlogo"]');
    if (img && img.getAttribute('src').includes('Reports')) {
      item.dispatchEvent(new Event('mouseenter', { bubbles: true }));
 
      setTimeout(() => {
        const popup = item.querySelector('.child-popup');
        if (!popup) return console.warn('Popup not found');
 
        const children = popup.querySelectorAll('span.menu-label');
        for (const span of children) {
          if (span.textContent.trim() === childTitle) {
            span.click();
            return;
          }
        }
 
        console.warn('Child item not found:', childTitle);
      }, 300); // adjust delay if needed
      return;
    }
  }
 
  console.warn('Reports menu not found');
}
 
function waitForElementWithText(selector, text, timeout = 2000) {
  return new Promise((resolve, reject) => {
    const startTime = Date.now();
    const check = () => {
      const elements = Array.from(document.querySelectorAll(selector));
      const match = elements.find(el => el.textContent.trim().toLowerCase() === text.toLowerCase());
      if (match) return resolve(match);
      if (Date.now() - startTime > timeout) return reject(`Timeout: Element with text "${text}" not found.`);
      requestAnimationFrame(check);
    };
    check();
  });
}
 
async function clickcalenderrange(sday, smonth, eday, emonth, year) {
  try {
    document.getElementsByClassName("mat-icon-no-color")[2]?.click();
  } catch (e) {
    console.warn("Could not open time panel:", e);
  }
 
  try {
    document.getElementsByClassName('mdc-button__label')[3]?.click();
  } catch (e) {
    console.warn("Could not click date range picker button:", e);
  }
 
  // Select Start Date
  try {
    await waitForElementWithText('.mat-calendar-body-cell-content', year.toString()).then(el => el.click());
    await waitForElementWithText('.mat-calendar-body-cell-content', smonth).then(el => el.click());
    await waitForElementWithText('.mat-calendar-body-cell-content', sday.toString()).then(el => el.click());
  } catch (e) {
    console.warn("Failed to select start date:", e);
  }
 
  // Attempt to click confirm or next again
  try {
    document.getElementsByClassName('mdc-button__label')[3]?.click();
  } catch (e) {
    console.warn("Could not proceed to end date:", e);
  }
 
  // Select End Date
  try {
    await waitForElementWithText('.mat-calendar-body-cell-content', year.toString()).then(el => el.click());
    await waitForElementWithText('.mat-calendar-body-cell-content', emonth).then(el => el.click());
    await waitForElementWithText('.mat-calendar-body-cell-content', eday.toString()).then(el => el.click());
     
 
  } catch (e) {
    console.warn("Failed to select end date:", e);
  }
}
 
let hstartday=startDate.getDate();
let hstartmonthname=monthNames[startDate.getMonth()]
let hstartyear=startDate.getFullYear();
 
console.log(`start-${hstartday}-${hstartmonthname}-${hstartyear}`)
 
let hendday=endDate.getDate();
let hendmonthname=monthNames[endDate.getMonth()]
let hendyear=endDate.getFullYear();
 
console.log(`end-${hendday}-${hendmonthname}-${hendyear}`)
 
 
async function runProcess() {
  document.getElementsByClassName('clickable')[1].click();
  let currentDate = new Date(startDate);
  let allHeaders = [];
  let allRows = [];
  let repeatCount = 0;
  let sumdata=[];
 
  while (currentDate <= endDate) {
    const day = currentDate.getDate();
    const monthName = monthNames[currentDate.getMonth()];
    const year = currentDate.getFullYear();
    const shift = "A";
 
    console.log(`Clicking date: ${day} ${monthName} ${year} shift: ${shift}`);
    await clickCalendarDate(day, monthName, year, shift);
 
    console.log("Waiting 5 seconds for page update...");
    await delay(5000);  // increased for better UI response
 
    await scrapeTable('.summary_table',`${day}-${monthName}-${year}`,'individualday')
   
   
 
    currentDate.setDate(currentDate.getDate() + 1);
  }
 
 
 
  const csvString = buildRepeatedCSV(allHeaders, allRows);
  openAndClickReportChild('Historical TechEff Report');
  await delay(5000);
 
clickcalenderrange(hstartday, hstartmonthname,hendday, hendmonthname, hstartyear);
await delay(2000);
 await scrapeTable('.summary_table',`2025`,'historicalsum')
console.log(materialData);
 
for(let [key,value] of Object.entries(materialData)){
  var variancesum=0;
 for(item of value){
   if(item.type=="individualday")  variancesum+=item.variance;
 }
 console.log(key,variancesum);
   materialData[key].push({ date: '2025', variancesum, type: 'Individualsum' });

}
 
console.log(materialData);
 showoverlay(materialData);
 
 
}

function showoverlay(materialdata){
  const allDates = Object.values(materialdata).flat().filter(e => e.type === "individualday").map(e => new Date(e.date));
const fromDate = new Date(Math.min(...allDates)).toDateString();
const toDate = new Date(Math.max(...allDates)).toDateString();
 
// Styles
const style = document.createElement("style");
style.textContent = `
@keyframes zoomIn { to { transform: scale(1); } }
th, td { text-align: center; }
tr:hover { background: #f2f2f2; }
.material-cell:hover { cursor: pointer; text-decoration: underline; color: #007BFF; }
.red-cell { background-color: #f44336; color: white; font-weight: bold; }
`;
document.head.appendChild(style);
 
// Main overlay
const overlay = document.createElement("div");
overlay.style.cssText = `
  position: fixed; top: 0; left: 0; width: 100vw; height: 100vh;
  background: rgba(0,0,0,0.5); backdrop-filter: blur(6px);
  display: flex; align-items: center; justify-content: center;
  z-index: 10000; font-family: 'Segoe UI', sans-serif;
`;
document.body.appendChild(overlay);
 
// Modal container
const modal = document.createElement("div");
modal.style.cssText = `
  background: white; border-radius: 16px; padding: 30px;
  max-width: 800px; width: 95%; max-height: 90vh; overflow: hidden;
  box-shadow: 0 10px 40px rgba(0,0,0,0.3); animation: zoomIn 0.4s ease-out forwards;
`;
overlay.appendChild(modal);
 
// Header
modal.innerHTML = `
<h2 style="text-align:center; margin-bottom: 5px;">üìä Summary vs Historical Comparison</h2>
<p style="text-align:center; color: #666;">üóìÔ∏è ${fromDate} to ${toDate}</p>
`;
 
// Table wrapper
const tableWrapper = document.createElement("div");
tableWrapper.style.cssText = `
  margin-top: 20px; overflow-y: auto; max-height: 300px; border-radius: 10px; border: 1px solid #ddd;
`;
modal.appendChild(tableWrapper);
 
// Create main table
const table = document.createElement("table");
table.style.cssText = `width: 100%; border-collapse: collapse;`;
 
const headerRow = `
<thead style="position: sticky; top: 0; background: #2196f3; color: white;">
<tr>
<th style="padding: 12px;">Material</th>
<th style="padding: 12px;">Historical Sum</th>
<th style="padding: 12px;">Individual Sum</th>
<th style="padding: 12px;">Difference</th>
</tr>
</thead>
`;
 
let rows = ``;
Object.entries(materialdata).forEach(([mat, records]) => {
  const hist = records.find(r => r.type === "historicalsum")?.variance ?? 0;
  const indiv = records.find(r => r.type === "Individualsum")?.variancesum ?? 0;
  const diff = (indiv - hist).toFixed(2);
 
  const diffCell = `<td style="padding: 10px;" class="${diff > 1 ? 'red-cell' : ''}">${diff}</td>`;
 
  rows += `
<tr>
<td class="material-cell" data-name="${mat}" style="padding: 10px;">${mat}</td>
<td style="padding: 10px;">${hist}</td>
<td style="padding: 10px;">${indiv}</td>
      ${diffCell}
</tr>
  `;
});
 
table.innerHTML = headerRow + `<tbody>${rows}</tbody>`;
tableWrapper.appendChild(table);
 
// Close Button
const closeBtn = document.createElement("button");
closeBtn.textContent = "‚ùå";
closeBtn.style.cssText = `
  margin-top: 20px; padding: 10px 20px; background: #f44336; color: white;
  border: none; border-radius: 8px; cursor: pointer; float: right;
`;
closeBtn.onclick = () => overlay.remove();
modal.appendChild(closeBtn);
 
// Mini popup
const miniPopup = document.createElement("div");
miniPopup.style.cssText = `
  display: none; position: fixed; top: 50%; left: 50%;
  transform: translate(-50%, -50%); background: white;
  border-radius: 12px; padding: 20px; box-shadow: 0 5px 30px rgba(0,0,0,0.4);
  z-index: 10001; max-height: 80vh; overflow-y: auto; width: 400px;
`;
document.body.appendChild(miniPopup);
 
// Close mini popup
const closeMini = document.createElement("button");
closeMini.textContent = "Close";
closeMini.style.cssText = `
  margin-top: 15px; background: #555; color: white; border: none;
  padding: 8px 14px; border-radius: 6px; cursor: pointer;
`;
closeMini.onclick = () => miniPopup.style.display = "none";
 
// Table click event
document.querySelectorAll(".material-cell").forEach(cell => {
  cell.onclick = () => {
    const mat = cell.dataset.name;
    const data = materialdata[mat].filter(e => e.type === "individualday");
 
    miniPopup.innerHTML = `
<h3 style="margin-bottom: 10px;">üì¶ ${mat.toUpperCase()} - Daily Variance</h3>
<table style="width:100%; border-collapse: collapse;">
<thead>
<tr style="background:#1976d2; color:white;">
<th style="padding:8px;">Date</th>
<th style="padding:8px;">Variance</th>
</tr>
</thead>
<tbody>
          ${data.map(row => `
<tr>
<td style="padding:8px; border-bottom: 1px solid #eee;">${row.date}</td>
<td style="padding:8px; border-bottom: 1px solid #eee;">${row.variance}</td>
</tr>
          `).join("")}
</tbody>
</table>
    `;
    miniPopup.appendChild(closeMini);
    miniPopup.style.display = "block";
  };
});
}
 
function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}
 
function clickCalendarDate(day, month, year, shift) {
  return new Promise((resolve) => {
    try {
      document.getElementsByClassName("mat-icon-no-color")[2].click();
    } catch (e) {
      console.warn("Could not open time panel:", e);
    }
 
    const shiftclass = `checkbox-${shift}`;
 
    function checkCheckboxById(id) {
      const checkbox = document.querySelector(`#${id} input[type="checkbox"]`);
      if (checkbox && !checkbox.checked) {
        checkbox.click();
      }
    }
 
    try {
      document.getElementsByClassName("mdc-button__label")[0].click();
    } catch (e) {
      console.warn("Could not click first mdc-button__label:", e);
    }
 
    function clickByText(text) {
      const el = Array.from(document.querySelectorAll('.mat-calendar-body-cell-content'))
        .find(e => e.textContent.trim().toLowerCase() === text.toLowerCase());
      if (el) el.click();
      else console.warn(`Element with text "${text}" not found`);
    }
 
    clickByText(year.toString());
    clickByText(month);
 
    setTimeout(() => {
      clickByText(day.toString());
      checkCheckboxById(shiftclass);
 
      try {
        document.getElementsByClassName("mdc-button__label")[1].click();
        document.getElementsByClassName("mdc-button__label")[0].click();
      } catch (e) {
        console.warn("Could not click buttons after selecting day:", e);
      }
      resolve();
    }, 300);
  });
}
 
async function scrapeTable(tableSelector, dateStr,typeValue) {
  const table = document.querySelector(tableSelector);
  if (!table) {
    console.warn('Table not found:', tableSelector);
    return { headers: [], rows: [] };
  }
 
  const headers = Array.from(table.querySelectorAll('thead tr th')).map(th =>
    th.textContent.trim()
  );
 
  const rows = Array.from(table.querySelectorAll('tbody tr')).map(tr =>
    Array.from(tr.querySelectorAll('td')).map(td =>
      td.textContent.trim()
    )
  );
 
  if (rows && rows.length <= 11) {
    console.log("Insufficient rows, retrying after delay...");
    await delay(2000);
    return await scrapeTable(tableSelector, dateStr,typeValue);
  }
  let totalCount = 0;
 
  rows.forEach(cells => {
    const rawLabel = cells[0]?.trim().toLowerCase();
    const variance = parseFloat(cells[2]?.replace(/[^0-9\.-]+/g, '') || 0);
 
    let key;
 
    if (rawLabel === "total") {
      key = totalCount++ === 0 ? "total_material" : "total_units";
    } else {
      for (const [label, mappedKey] of Object.entries(labelToKey)) {
        if (rawLabel === label.trim().toLowerCase()) {
          key = mappedKey;
          break;
        }
      }
    }
 
    if (key && materialData[key]) {
      materialData[key].push({ date: dateStr, variance, type: typeValue });
    } else {
      console.warn("Unmatched row:", rawLabel);
    }
  });
 
  console.log("‚úÖ Extraction done.");
  return { headers, rows };
}
 
 
 
 
 
 
 
function buildRepeatedCSV(allHeaders, allRows) {
  const emptyCols = new Array(2).fill('""');
  const csvLines = [];
 
  let repeatedHeaders = [];
  for (let i = 0; i < allRows.length; i++) {
    repeatedHeaders.push(...allHeaders);
    if (i < allRows.length - 1) repeatedHeaders.push(...emptyCols);
  }
  csvLines.push(repeatedHeaders.join(','));
 
  const maxRows = Math.max(...allRows.map(rows => rows.length));
 
  const summaryMap = new Map();
 
  for (let rowIndex = 0; rowIndex < maxRows; rowIndex++) {
    let repeatedRow = [];
    for (let dateIndex = 0; dateIndex < allRows.length; dateIndex++) {
      const dateRows = allRows[dateIndex];
      if (rowIndex < dateRows.length) {
        const row = dateRows[rowIndex];
        repeatedRow.push(...row);
 
        // Build summary
        const material = row[0].replace(/"/g, '');
        const uom = row[1].replace(/"/g, '');
        const variance = parseFloat(row[2].replace(/"/g, '')) || 0;
 
        const key = `${material}|${uom}`;
        if (summaryMap.has(key)) {
          summaryMap.get(key).variance += variance;
        } else {
          summaryMap.set(key, { material, uom, variance });
        }
      } else {
        repeatedRow.push(...new Array(allHeaders.length).fill('""'));
      }
      if (dateIndex < allRows.length - 1) repeatedRow.push(...emptyCols);
    }
    csvLines.push(repeatedRow.join(','));
  }
 
  // Add empty row for separation
  csvLines.push('');
  csvLines.push('"Material","UOM","Sum of Variance (Tons)"');
 
  // Append summary rows
  for (const { material, uom, variance } of summaryMap.values()) {
    csvLines.push(`"${material}","${uom}","${variance.toFixed(2)}"`);
  }
 
  return csvLines.join('\n');
}
 
 
 
 
 
function downloadCSV(csvString, filename) {
  const blob = new Blob([csvString], { type: 'text/csv;charset=utf-8;' });
  const link = document.createElement('a');
  link.href = URL.createObjectURL(blob);
  link.download = filename;
 
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
}
 
// Start
runProcess();
 
 
