let start = datetime("2025-06-29 00:30:00");
let end = datetime("2025-06-30 00:30:00");
let TagMapping = datatable(Cascade:string, CountOutTag:string, GramTag:string)
[
    "CASCADE1","LOGIX_cas2_pwp_llpl.cas2_pwp_llpl.Cascade 1_ACMASOAP_COUNTOUT_CAS1","TSPCAS3.Cascade3.ACMA1_CURRENT_SOAP_GRAM",
    "CASCADE2", "LOGIX_cas2_pwp_llpl.cas2_pwp_llpl.Cascade 1_WRA2_SOAP_COUNTOUT_CAS2", "TSPCAS3.Cascade3.WRA2_CURRENT_SOAP_GRAM",
    "CASCADE2", "LOGIX_cas2_pwp_llpl.cas2_pwp_llpl.Cascade 1_WRA3_SOAP_COUNTOUT_CAS2", "TSPCAS3.Cascade3.WRA3_CURRENT_SOAP_GRAM",
    "CASCADE2", "LOGIX_cas2_pwp_llpl.cas2_pwp_llpl.Cascade 1_WRA4_SOAP_COUNTOUT_CAS2", "TSPCAS3.Cascade3.WRA4_CURRENT_SOAP_GRAM",
    "CASCADE3", "LOGIX_cas2_pwp_llpl.cas2_pwp_llpl.Cascade 1_WRA5_SOAP_COUNTOUT_CAS3", "TSPCAS3.Cascade3.WRA5_CURRENT_SOAP_GRAM",
    "CASCADE3", "LOGIX_cas2_pwp_llpl.cas2_pwp_llpl.Cascade 1_WRA6_SOAP_COUNTOUT_CAS3", "TSPCAS3.Cascade3.WRA6_CURRENT_SOAP_GRAM",
    "CASCADE4", "LOGIX_cas2_pwp_llpl.cas2_pwp_llpl.Cascade 1_WRA7_SOAP_COUNTOUT_CAS4", "TSPCAS3.Cascade3.WRA7_CURRENT_SOAP_GRAM",
    "CASCADE4", "LOGIX_cas2_pwp_llpl.cas2_pwp_llpl.Cascade 1_WRA8_SOAP_COUNTOUT_CAS4", "TSPCAS3.Cascade3.WRA8_CURRENT_SOAP_GRAM",
    "CASCADE4", "LOGIX_cas2_pwp_llpl.cas2_pwp_llpl.Cascade 1_WRA9_SOAP_COUNTOUT_CAS4", "TSPCAS3.Cascade3.WRA9_CURRENT_SOAP_GRAM",
    "CASCADE5", "LOGIX_cas2_pwp_llpl.cas2_pwp_llpl.Cascade 1_WRA10_SOAP_COUNTOUT_CAS5", "NEW_TSP.CAS5_6.WRA10_CURRENT_SOAP_GRAM",
    "CASCADE5", "LOGIX_cas2_pwp_llpl.cas2_pwp_llpl.Cascade 1_WRA11_SOAP_COUNTOUT_CAS5", "NEW_TSP.CAS5_6.WRA11_CURRENT_SOAP_GRAM",
    "CASCADE5", "LOGIX_cas2_pwp_llpl.cas2_pwp_llpl.Cas05_Wra_12_Soap_Count",        "NEW_TSP.CAS5_6.WRA12_CURRENT_SOAP_GRAM",
    "CASCADE6", "LOGIX_cas2_pwp_llpl.cas2_pwp_llpl.Cascade 1_WRA13_SOAP_COUNTOUT_CAS6", "NEW_TSP.CAS5_6.WRA13_CURRENT_SOAP_GRAM",
    "CASCADE6", "LOGIX_cas2_pwp_llpl.cas2_pwp_llpl.Cascade 1_WRA14_SOAP_COUNTOUT_CAS6", "NEW_TSP.CAS5_6.WRA14_CURRENT_SOAP_GRAM",
    "CASCADE6", "LOGIX_cas2_pwp_llpl.cas2_pwp_llpl.Cascade 1_WRA15_SOAP_COUNTOUT_CAS6", "NEW_TSP.CAS5_6.WRA15_CURRENT_SOAP_GRAM",
    "CASCADE6", "LOGIX_cas2_pwp_llpl.cas2_pwp_llpl.Cascade 1_WRA16_SOAP_COUNTOUT_CAS6", "NEW_TSP.CAS5_6.WRA16_CURRENT_SOAP_GRAM"
];
let CountOutData =
Common2
| where TS between (start .. end)
      and SiteId == "LLPL"
      and Tag in (TagMapping | distinct CountOutTag)
| extend Shift = case(
        (datetime_part("Hour", TS) == 0 and datetime_part("Minute", TS) >= 30) or
        (datetime_part("Hour", TS) > 0 and datetime_part("Hour", TS) < 8) or
        (datetime_part("Hour", TS) == 8 and datetime_part("Minute", TS) < 30), "1",
        (datetime_part("Hour", TS) == 8 and datetime_part("Minute", TS) >= 30) or
        (datetime_part("Hour", TS) > 8 and datetime_part("Hour", TS) < 16) or
        (datetime_part("Hour", TS) == 16 and datetime_part("Minute", TS) < 30), "2", "3")
| sort by Tag, TS asc
| where isnotempty(Value)
| extend Value = toreal(Value)
| extend Diff = iff(prev(Tag) == Tag and Shift == prev(Shift), Value - prev(Value), 0.0)
| extend Diff = iff(Diff < 0, 0.0, Diff)
| summarize Soap_CountOut = sum(Diff) by CountOutTag=Tag, Shift;
let GramData =
Common2
| where TS between (start .. end)
      and SiteId == "LLPL"
      and Tag in (TagMapping | distinct GramTag)
| extend Shift = case(
        (datetime_part("Hour", TS) == 0 and datetime_part("Minute", TS) >= 30) or
        (datetime_part("Hour", TS) > 0 and datetime_part("Hour", TS) < 8) or
        (datetime_part("Hour", TS) == 8 and datetime_part("Minute", TS) < 30), "1",
        (datetime_part("Hour", TS) == 8 and datetime_part("Minute", TS) >= 30) or
        (datetime_part("Hour", TS) > 8 and datetime_part("Hour", TS) < 16) or
        (datetime_part("Hour", TS) == 16 and datetime_part("Minute", TS) < 30), "2", "3")
| where isnotempty(Value) and Value != 0
| extend Value = toreal(Value)
| summarize arg_max(TS, Value) by GramTag=Tag, Shift
| project GramTag, Shift, Soap_Gram=Value;
let result =
TagMapping
| join kind=inner (
    CountOutData
) on CountOutTag
| join kind=inner (
    GramData
) on GramTag, Shift
| extend TotalSoapGram = Soap_CountOut * Soap_Gram
| project Shift, Cascade, CountOutTag, GramTag, Soap_CountOut, Soap_Gram, TotalSoapGram
| order by Shift asc, Cascade asc
| summarize TotalSoapQty = round(sum(TotalSoapGram)/1000000.0, 2) by Cascade, Shift;
let shift4 =
    result
    | summarize TotalSoapQty = round(sum(TotalSoapQty), 2) by Cascade
    | extend Shift = "4";
result
| union shift4
| sort by Cascade, toint(Shift)
